datamatrix = c()
tes_split_list = c()
for(j in c(1:length(file_name_vec))){
# for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
tes_split_list <- c(tes_split_list, tes_split)
}
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!require("caret")) install.packages("caret")
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
source('../lib/features.R')
datamatrix = c()
tes_split_list = c()
for(j in c(1:length(file_name_vec))){
# for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
tes_split_list <- c(tes_split_list, tes_split)
}
warnings()
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!require("caret")) install.packages("caret")
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
source('../lib/features.R')
datamatrix = c()
tes_split_list = c()
for(j in c(1:length(file_name_vec))){
# for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
tes_split_list <- c(tes_split_list, tes_split)
}
j=1
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
ifcorrectmatrix
feat <- do.call(rbind, lapply(tes_split, features))
feat
tolower(strsplit('Word', "")[[1]])
vowels <- '[aeiou]'
consonants <- '[bcdfghjklmnpqrstvxzwy]'
str_count(word_lower, vowels)
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
feat
features('Apple')
word='Apple'
#feature2
word_lower <- tolower(strsplit(word, "")[[1]])
vowels <- '[aeiou]'
consonants <- '[bcdfghjklmnpqrstvxzwy]'
v <- str_count(word_lower, vowels)
v
features <- function(word){
#feature1
l <- str_length(word)
#feature2
word_lower <- tolower(strsplit(word, "")[[1]])
vowels <- '[aeiou]'
consonants <- '[bcdfghjklmnpqrstvxzwy]'
v <- sum(str_count(word_lower, vowels))
c <- sum(str_count(word_lower, consonants))
q1 <- v / l
q2 <- c / l
q3 <- ifelse(c != 0, v/c, 2*l)
#feature3
s <- length(grep("[^[:alnum:]]", strsplit(word,"")[[1]]))
#feature4
d<-length(grep("[0-9]", strsplit(word,"")[[1]]))
#feature5
low<-length(grep("[a-z]", strsplit(word,"")[[1]]))
upp<-length(grep("[A-Z]", strsplit(word,"")[[1]]))
#feature6
maxletter <- max(unlist(rle(strsplit(word,"")[[1]])[1]))
f6 <- ifelse(maxletter>2, maxletter/l, 0)
#feature7
l_alpha<-length(grep("[[:alnum:]=\\.]", strsplit(word,"")[[1]]))
k<-l-l_alpha
f7 <- ifelse(k>l_alpha,1,0)
#feature8
consec_con<-str_count(word,"[bcdfghjklmnpqrstvxzwyBCDFGHJKLMNPQRSTVXZWY]{6,}")
f8 <- ifelse(consec_con>=1,1,0)
#feature9
trim_word <- substr(word,2,(l-1))
non_alnum<-str_count(trim_word,"[^[:alnum:]]")
f9 <- ifelse(non_alnum>=2,1,0)
#feature10bigram
bigramletters <- tolower(char_ngrams(strsplit(word,"")[[1]],2,concatenator = ""))
f10 <- ifelse(l>=2, sum(bigramtable[bigramletters], na.rm = TRUE)/length(bigramletters)/10000, 0)
#feature11MFS
split <- strsplit(word, "")[[1]]
i <- max(table(split))
f11 <- ifelse(i>=3, i/l, 0)
#feature12NAS
l1 <- length(grep("[[:alpha:]]", strsplit(word,"")[[1]]))
l2 <- l-l1
f12 <- ifelse(l1 != 0, l2/l1, l*2)
return(c(l=l,v=v, c=c,
v_l = q1, c_l = q2, v_c = q3,
s=s, s_l = s/l,
d=d, d_l = d/l,
low = low, upp = upp, low_l = low/l, upp_l = upp/l,
f6=f6, f7=f7, f8=f8, f9=f9, f10=f10, f11=f11, f12=f12))
}
features('Apple')
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
feat
source('../lib/features.R')
datamatrix = c()
tes_split_list = c()
for(j in c(1:length(file_name_vec))){
# for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
tes_split_list <- c(tes_split_list, tes_split)
}
# for (p in 1:100){
#   print(p)
#   print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
# }
nrow(datamatrix)
length(tes_split_list)
dm%>%group_by(j) %>%summarise(n= n())
dm=data.matrix(datamatrix)
dm%>%group_by(j) %>%summarise(n= n())
library(tidyverse)
dm%>%group_by(j) %>%summarise(n= n())
head(dm)
dm%>%group_by(j) %>%summarise(n= n())
dm%>%group_by(j)
dm%>%select(j)
library(tidyverse)
dm%>%select(j)
dm %>% select(j)
dm <- data.matrix(datamatrix)
dm %>% select(j)
library(dplyr)
dm %>% select(j)
select(dm,j)
str(dm)
iii=2470
tes_split_list[iii]
dm[iii,]
iii=1500
tes_split_list[iii]
dm[iii,]
iii=2500
tes_split_list[iii]
dm[iii,]
iii=2300
tes_split_list[iii]
dm[iii,]
iii=2000
tes_split_list[iii]
dm[iii,]
iii=2000-244
tes_split_list[iii]
dm[iii,]
iii=2000-243
tes_split_list[iii]
dm[iii,]
save(datamatrix, file = '../output/datamatrix_new.RData')
save(tes_split_list, file = '../output/tes_split_list.RData')
