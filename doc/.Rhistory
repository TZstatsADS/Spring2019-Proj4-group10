nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
a
b
c
d
truthpos <- c(0)
for (i in 1:length(tes_split)){
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
# truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5)))>0,
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
sum(truthpos!=0)
truthpos
j=2
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
#split tesseract text
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
#tesseract_table <- cbind(word = tes_split, tes_row)
#get position of correct ones
res = c()
pos = rep(list(0), length(tes_split))
for (i in 1:length(tes_split)){
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
truthpos <- c(0)
for (i in 1:length(tes_split)){
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
# truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5)))>0,
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
sum(truthpos!=0)/length(truthpos)
j=30
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
#split tesseract text
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
#tesseract_table <- cbind(word = tes_split, tes_row)
#get position of correct ones
res = c()
pos = rep(list(0), length(tes_split))
for (i in 1:length(tes_split)){
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
truthpos <- c(0)
for (i in 1:length(tes_split)){
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
# truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5)))>0,
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
sum(truthpos!=0)/length(truthpos)
truthpos
j=40
j=22
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
#split tesseract text
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
#tesseract_table <- cbind(word = tes_split, tes_row)
#get position of correct ones
res = c()
pos = rep(list(0), length(tes_split))
for (i in 1:length(tes_split)){
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
truthpos <- c(0)
for (i in 1:length(tes_split)){
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
# truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5)))>0,
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
sum(truthpos!=0)/length(truthpos)
truthpos
j=60
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
#split tesseract text
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
#tesseract_table <- cbind(word = tes_split, tes_row)
#get position of correct ones
res = c()
pos = rep(list(0), length(tes_split))
for (i in 1:length(tes_split)){
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
truthpos <- c(0)
for (i in 1:length(tes_split)){
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
# truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5)))>0,
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
sum(truthpos!=0)/length(truthpos)
truthpos
truthpos[1000:2000]
1:4
datamatrix = c()
for(j in c(1:length(file_name_vec))){
#for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
#split tesseract text
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
#tesseract_table <- cbind(word = tes_split, tes_row)
#get position of correct ones
res = c()
pos = rep(list(0), length(tes_split))
for (i in 1:length(tes_split)){
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
truthpos <- c(0)
for (i in 1:length(tes_split)){
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
# truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5)))>0,
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
#1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
rownames(ifcorrectmatrix) <- tes_split
#add features
feat <- do.call(rbind, lapply(tes_split, features))
# datamatrix[[j]] <- cbind(ifcorrectmatrix, feat)
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
# as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==0,][,'f10'])%>%mean()
# 6.290125
# as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==1,][,'f10'])%>%mean()
# 12.1335
# apply(is.na(dm),2,sum)
}
apply(is.na(dm),2,sum)
dm <- data.frame(datamatrix)
apply(is.na(dm),2,sum)
as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==0,][,'f10'])%>%mean()
as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==1,][,'f10'])%>%mean()
sum(culsum(diff(dm$ifwordcorrect))>100)
sum(cumsum(diff(dm$ifwordcorrect))>100)
sum(cumsum(diff(dm$ifwordcorrect))>40)
sum(cumsum(diff(dm$ifwordcorrect))>30)
sum(cumsum(diff(dm$ifwordcorrect))>20)
sum(cumsum(diff(dm$ifwordcorrect))>10)
sum(cumsum(diff(dm$ifwordcorrect))>5)
diff(dm$ifwordcorrect)
rrrr=rep(c,10)
rrrr
rrrr=rep(0,10)
grep(rrrr,dm$ifwordcorrect)
dm$ifwordcorrect
rrrr
grep(as.character(rrrr),as.character(dm$ifwordcorrect))
as.character(rrrr)
demo = dm$ifwordcorrect
for (i in length(demo)-100){
if(demo[i]=0 & demo[i+1]=0& demo[i+2]=0& demo[i+3]=0& demo[i+4]=0 & demo[i+5]=0 & demo[i+6]=0 & demo[i+7]=0 )
print(u)
}
for (i in length(demo)-100){
if(demo[i]=0 & demo[i+1]=0& demo[i+2]=0& demo[i+3]=0& demo[i+4]=0 & demo[i+5]=0 & demo[i+6]=0 & demo[i+7]=0 )
print(i)
}
for (i in length(demo)-100){
if(demo[i]=0 & demo[i+1]=0& demo[i+2]=0& demo[i+3]=0& demo[i+4]=0 & demo[i+5]=0 & demo[i+6]=0 & demo[i+7]=0 )
{print(i)}
}
for (i in length(demo)-100){
if(demo[i]=0 & demo[i+1]=0& demo[i+2]=0& demo[i+3]=0& demo[i+4]=0 & demo[i+5]=0 & demo[i+6]=0 & demo[i+7]=0 )
(print(i))
}
}
}
head(datamatrix)
nrow(datamatrix)
if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
install_github("trinker/pacman")
}
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/features.R')
load('../output/bigram.RData')
load('../output/datamatrix.RData')
file_name_vec <- list.files("../data/ground_truth") #100 files in total
datamatrix = c()
for(j in c(1:length(file_name_vec))){
#for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
#split tesseract text
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
#tesseract_table <- cbind(word = tes_split, tes_row)
#get position of correct ones
res = c()
pos = rep(list(0), length(tes_split))
for (i in 1:length(tes_split)){
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
truthpos <- c(0)
for (i in 1:length(tes_split)){
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
# truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5)))>0,
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
#1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
rownames(ifcorrectmatrix) <- tes_split
#add features
feat <- do.call(rbind, lapply(tes_split, features))
# datamatrix[[j]] <- cbind(ifcorrectmatrix, feat)
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
# as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==0,][,'f10'])%>%mean()
# 6.414072
# as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==1,][,'f10'])%>%mean()
# 12.13309
# dm <- data.frame(datamatrix)
# apply(is.na(dm),2,sum)
}
save(datamatrix, file = '../output/datamatrix.RData')
if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
install_github("trinker/pacman")
}
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/features.R')
load('../output/bigram.RData')
load('../output/datamatrix.RData')
file_name_vec <- list.files("../data/ground_truth") #100 files in total
if (!require("devtools")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
install_github("trinker/pacman")
}
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
load('../output/bigram.RData')
file_name_vec <- list.files("../data/ground_truth") #100 files in total
source('../lib/features.R')
datamatrix = c()
for(j in c(1:length(file_name_vec))){
#for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
#split tesseract text
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
#tesseract_table <- cbind(word = tes_split, tes_row)
#get position of correct ones
res = c()
pos = rep(list(0), length(tes_split))
for (i in 1:length(tes_split)){
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
truthpos <- c(0)
for (i in 1:length(tes_split)){
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
nextnonzero3 <- min(which(tempindex == tempindex[i]+3))
nextnonzero4 <- min(which(tempindex == tempindex[i]+4))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
c <- pos[[nextnonzero3]]
d <- pos[[nextnonzero4]]
# truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5)))>0,
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
#1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
rownames(ifcorrectmatrix) <- tes_split
#add features
feat <- do.call(rbind, lapply(tes_split, features))
# datamatrix[[j]] <- cbind(ifcorrectmatrix, feat)
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
# as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==0,][,'f10'])%>%mean()
# 6.414072
# as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==1,][,'f10'])%>%mean()
# 12.13309
# dm <- data.frame(datamatrix)
# apply(is.na(dm),2,sum)
}
#save(datamatrix, file = '../output/datamatrix.RData')
save(datamatrix, file = '../output/datamatrix.RData')
dm <- data.frame(datamatrix)
apply(is.na(dm),2,sum)
as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==0,][,'f10'])%>%mean()
as.numeric(datamatrix[datamatrix[,'ifwordcorrect']==1,][,'f10'])%>%mean()
