View(datamatrix)
View(datamatrix)
View(datamatrix)
for (p in 1:100){
print(p)
print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
}
load("/Users/yeyejiang/Documents/GitHub/Spring2019-Proj4-group10/output/datamatrix.RData")
View(datamatrix)
View(datamatrix)
datamatrix[datamatrix[,'j']==4,])
datamatrix[datamatrix[,'j']==4,]
# for(j in c(1:length(file_name_vec))){
for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
tes_split_list <- c(tes_split_list, tes_split)
}
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!require("caret")) install.packages("caret")
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
source('../lib/features.R')
datamatrix = c()
tes_split_list = c()
# for(j in c(1:length(file_name_vec))){
for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
tes_split_list <- c(tes_split_list, tes_split)
}
nrow(datamatrix)
length(tes_split_list)
head(datamatrix)
tes_split_list[1:6]
source('../lib/features.R')
datamatrix = c()
tes_split_list = c()
for(j in c(1:length(file_name_vec))){
# for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
tes_split_list <- c(tes_split_list, tes_split)
}
length(tes_split_list)
nrow(datamatrix)
tes_split_list
save(datamatrix, file = '../output/datamatrix_new.RData')
save(tes_split_list, file = '../output/datamatrix_new.RData')
save(datamatrix, file = '../output/datamatrix_new.RData')
save(tes_split_list, file = '../output/tes_split_list.RData')
source('../lib/features.R')
datamatrix = c()
tes_split_list = c()
for(j in c(1:length(file_name_vec))){
# for(j in c(1:2)){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
#rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
tes_split_list <- c(tes_split_list, tes_split)
}
nrow(datamatrix)
source('~/.active-rstudio-document', echo=TRUE)
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("caret")
if (!require("modeest")) install.packages("modeest")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genefilter", version = "3.8")
library(genefilter)
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
file_name_vec <- list.files("../data/ground_truth") #100 files in total
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
#see the svm.R
#performance of SVM model
load('../output/datamatrix_new.RData')
load('../output/tes_split_list.RData')
#test  (delete later)
# for (p in 1:100){
#   print(p)
#   print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
# }
#split the dataset into training and test data
set.seed(1)
#head(datamatrix)
s<-sample(1:2,length(file_name_vec),prob=c(0.8,0.2),replace=T)
train.index<-which(s==1)
test.index<-which(s==2)
datamatrix<-as.data.frame(datamatrix)
datamatrix$ifwordcorrect<-factor(datamatrix$ifwordcorrect)
trainset<-as.data.frame(datamatrix[datamatrix$j %in% train.index,c(-1,-2,-3,-4,-27)])
testset<-as.data.frame(datamatrix[datamatrix$j %in% test.index,c(-1,-2,-3,-4,-27)])
#report training accuracy
load("../output/svm.best.rda")
load("../output/predvalue.rda")
#report training confusion matrix
library(caret)
confusionMatrix(data=predvalue,reference=testset$ifwordcorrect,positive="0")->svm.table
svm.table
#recall
svm.table$table[1,1]/(svm.table$table[1,1]+svm.table$table[1,2])->recall
recall
#F-1 score
precision<-svm.table$table[1,1]/(svm.table$table[2,1]+svm.table$table[1,1])
f1<-2*precision*recall/(precision+recall)
f1
#see correction.R
test_df <- as.data.frame(datamatrix[datamatrix[,'j'] %in% test.index,])
test_vec <- tes_split_list[datamatrix[,'j'] %in% test.index,]
#see correction.R
test_df <- as.data.frame(datamatrix[datamatrix[,'j'] %in% test.index,])
test_vec <- tes_split_list[datamatrix[,'j'] %in% test.index]
test_if_clean <- predvalue
#length(tesseract_if_clean)
test_if_error <- ifelse(test_if_clean==1,F,T)
#extract error terms
test_error_vec <- test_vec[test_if_error]
load("../output/error_correction.RData")
#see correction.R
test_df <- as.data.frame(datamatrix[datamatrix[,'j'] %in% test.index,])
test_vec <- tes_split_list[datamatrix[,'j'] %in% test.index]
test_if_clean <- predvalue
#length(tesseract_if_clean)
test_if_error <- ifelse(test_if_clean==1,F,T)
#extract error terms
test_error_vec <- test_vec[test_if_error]
load("../output/aftercorrection1.RData")
load("../output/aftercorrection2.RData")
#create a performance table
OCR_performance_table <- data.frame("Tesseract" = rep(NA,4),
"Tesseract_with_postprocessing" = rep(NA,4))
row.names(OCR_performance_table) <- c("word_wise_recall","word_wise_precision",
"character_wise_recall","character_wise_precision")
library(tidyr)
#Collecting ground truth vector
ground_truth_vec <- c()
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
ground_truth_vec <- c(ground_truth_vec, inputtxt1)
}
# for(i in test.index){
#   inputtxt <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
#   inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
#   ground_truth_vec <- c(ground_truth_vec, inputtxt1)
# }
# ground_truth_vec <- unlist(strsplit(tolower(ground_truth_vec), " "))
# Collecting tesseract vector
tesseract_vec <- test_vec
# Loading in tesseract words after detection + correction algorithm
# Correcting words with 1 errors
# load("../output/aftercorrection1.RData")
# aftercorrection_vec <- test_df_correct1[,2]
# Correcting words with 2 errors
load("../output/aftercorrection2.RData")
aftercorrection_vec <- test_df_correct2[,2]
#43023
# Collecting tesseract vector
# case 1
# tesseract_vec1 <- test_df_correct1[,1]
# tesseract_delete_error_vec1 <- test_df_correct1[,2]
#
# old_intersect_vec1 <- vecsets::vintersect(tolower(ground_truth_vec), tolower(tesseract_vec1)) #607
# new_intersect_vec1 <- vecsets::vintersect(tolower(ground_truth_vec), tolower(tesseract_delete_error_vec1))
#
# OCR_performance_table["word_wise_recall","Tesseract"] <- length(old_intersect_vec1)/length(ground_truth_vec)
# OCR_performance_table["word_wise_precision","Tesseract"] <- length(old_intersect_vec1)/length(tesseract_vec1)
# OCR_performance_table["word_wise_recall","Tesseract_with_postprocessing"] <- length(new_intersect_vec1)/length(ground_truth_vec)
# OCR_performance_table["word_wise_precision","Tesseract_with_postprocessing"] <- length(new_intersect_vec1)/length(tesseract_delete_error_vec1)
# kable(OCR_performance_table, caption="Summary of OCR performance")
# case 2
tesseract_vec2 <- test_df_correct2[,1]
tesseract_delete_error_vec2 <- test_df_correct2[,2]
old_intersect_vec2 <- vecsets::vintersect(tolower(ground_truth_vec), tolower(tesseract_vec2)) #607
new_intersect_vec2 <- vecsets::vintersect(tolower(ground_truth_vec), tolower(tesseract_delete_error_vec2))
OCR_performance_table["word_wise_recall","Tesseract"] <- length(old_intersect_vec2)/length(ground_truth_vec)
OCR_performance_table["word_wise_precision","Tesseract"] <- length(old_intersect_vec2)/length(tesseract_vec2)
OCR_performance_table["word_wise_recall","Tesseract_with_postprocessing"] <- length(new_intersect_vec2)/length(ground_truth_vec)
OCR_performance_table["word_wise_precision","Tesseract_with_postprocessing"] <- length(new_intersect_vec2)/length(tesseract_delete_error_vec2)
ground_char_count <- NULL
tess_char_count <- NULL
corrected_char_count <- NULL
## Evaluating character-level metrics (precision & recall)
for (word in ground_truth_vec) {
word_alph <- gsub("[^[:alpha:]]+", "", word)
char_table <- table(factor(unlist(strsplit(word_alph, ""), use.names=FALSE), levels=letters))
if(is.null(ground_char_count)) {
ground_char_count <- char_table
}
else {
ground_char_count <- ground_char_count + char_table
}
}
for (word in tesseract_vec) {
word_alph <- gsub("[^[:alpha:]]+", "", word)
char_table <- table(factor(unlist(strsplit(word_alph, ""), use.names=FALSE), levels=letters))
if(is.null(tess_char_count)) {
tess_char_count <- char_table
}
else {
tess_char_count <- tess_char_count + char_table
}
}
for (word in aftercorrection_vec) {
word_alph <- gsub("[^[:alpha:]]+", "", word)
char_table <- table(factor(unlist(strsplit(word_alph, ""), use.names=FALSE), levels=letters))
if(is.null(corrected_char_count)) {
corrected_char_count <- char_table
}
else {
corrected_char_count <- corrected_char_count + char_table
}
}
tess_pre_char_correct <- 0
tess_post_char_correct <- 0
for (i in names(ground_char_count)) {
tess_pre_char_correct <- tess_pre_char_correct + min(ground_char_count[i], tess_char_count[i])
tess_post_char_correct <- tess_post_char_correct + min(ground_char_count[i], corrected_char_count[i])
}
# Character-wise recall & precision
OCR_performance_table["character_wise_recall","Tesseract"] <- tess_pre_char_correct / sum(ground_char_count)
OCR_performance_table["character_wise_precision","Tesseract"] <- tess_pre_char_correct / sum(tess_char_count)
OCR_performance_table["character_wise_recall","Tesseract_with_postprocessing"] <- tess_post_char_correct / sum(ground_char_count)
OCR_performance_table["character_wise_precision","Tesseract_with_postprocessing"] <- tess_post_char_correct / sum(corrected_char_count)
kable(OCR_performance_table, caption="Summary of OCR performance")
