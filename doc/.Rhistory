newpos[i+1] <- ifelse(((pos[[i]]>newpos[i])&(pos[[i]] <= (i+5))),
pos[[i]][min(which(pos[[i]]>newpos[i]))],
newpos[i])
}
newpos <- newpos[-1]
for (i in 1:nrow(tesseract_table)){
newpos[i+1] <- ifelse(res[i]==0, 0, newpos[i+1])
}
newpos
newpos = c(0) #position plus one
for (i in 1:nrow(tesseract_table)){
newpos[i+1] <- ifelse(((pos[[i]]>newpos[i])&(pos[[i]] <= (i+5))),
pos[[i]][min(which(pos[[i]]>newpos[i]))],
newpos[i])
}
newpos <- newpos[-1]
for (i in 1:nrow(tesseract_table)){
newpos[i] <- ifelse(res[i]==0, 0, newpos[i])
}
newpos
truth_table[990:1000,]
truth_table[980:1000,]
tesseract_table[980:1000,]
newpos = c(0) #position plus one
for (i in 1:nrow(tesseract_table)){
newpos[i+1] <- ifelse(((pos[[i]]>newpos[i])&(pos[[i]] <= (i+5))),
pos[[i]][min(which(pos[[i]]>newpos[i]))],
newpos[i])
}
newpos <- newpos[-1]
newpos[100:710,]
newpos[100:710]
newpos[700:710]
res[700:710]
tesseract_table[700:710]
diff(newpos)
newpos
newpos1 <- (c(0, diff(newpos))==0, 0, newpos1)
newpos1 <- (c(0, diff(newpos))==0), 0, newpos1)
c(0, diff(newpos))
c(0, diff(newpos))==0
newpos[c(0, diff(newpos))==0] <- 0
newpos
tesseract_table
ifwordcorrect <- rep(1,nrow(tesseract_table))
ifwordcorrect[newpos==0] <- 0
ifwordcorrect
cbind(tesseract_table, ifwordcorrect)
nrow(truth_table)
nrow(tesseract_table)
qq=c(1,2,3,6,7,8,9)
ww=c(1,2,5,6,7,8,9,0,4,6)
ifcorrectmatrix <- cbind(tesseract_table, ifwordcorrect)
ifcorrectmatrix
ifcorrectmatrix <- cbind(tesseract_table, newpos, ifwordcorrect)
ifcorrectmatrix
truth_rowindex
ifcorrectmatrix['newpos',]
truthrow,
ifcorrectmatrix <- cbind(tesseract_table, truthpos,  ifwordcorrect)
truth_split <- str_split(current_ground_truth_txt, " ")
lengthperrow1 <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), lengthperrow1)
truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
nrow(truth_table) #1751
tesseract_split <- str_split(current_tesseract_txt, " ")
lengthperrow2 <- sapply(tesseract_split, length)
tesseract_rowindex <- rep(1:length(current_tesseract_txt), lengthperrow2)
tesseract_table <- cbind(word = unlist(tesseract_split), tesseract_rowindex)
nrow(tesseract_table) #1756
res = c()
pos = rep(list(0), nrow(tesseract_table))
for (i in 1:nrow(tesseract_table)){
res[i] <- ifelse(tesseract_table[i,1] %in% truth_table[,1],1,0)
pos[[i]] <- if(res[i]==1) which(truth_table[,1]==tesseract_table[i,1]) else 0
}
truthpos = c(0) #position plus one
for (i in 1:nrow(tesseract_table)){
truthpos[i+1] <- ifelse(((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5))),
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
#1: correct, 0: wrong
ifwordcorrect <- rep(1,nrow(tesseract_table))
ifwordcorrect[truthpos==0] <- 0
ifcorrectmatrix <- cbind(tesseract_table, truthpos,  ifwordcorrect)
ifcorrectmatrix
ifcorrectmatrix[,'truthpos']
truth_rowindex[ifcorrectmatrix[,'truthpos']]
truth_rowindex[2]
truth_rowindex[3]
truth_rowindex[3]
truth_rowindex[4]
truth_rowindex[1:4]
truthpos
truth_rowindex
lapply(truthpos, function(x) ifelse(truthpos==0,0,truth_rowindex[x]))
truth_rowindex
truthpos
sapply(truthpos, function(x) ifelse(truthpos==0,0,truth_rowindex[x]))
?apply
sapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))
lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))
sapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))
truth_row <- unlist(sapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x])))
ifcorrectmatrix <- cbind(tesseract_table, truthpos, truth_row, ifwordcorrect)
truth_row
truthpos
sapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))
truthpos[793:794]
sapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))[[790]]
truthpos[790]
truth_rowindex[790]
ifelse(truthpos[790]==0,0,truth_rowindex[790])
truth_row <- unlist(lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x])))
truth_row
lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))
lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))[[1]]
lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))[[2]]
lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))[[3]]
lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))[[4]]
lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))[[5]]
lapply(truthpos, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x]))[[6]]
ifelse(truthpos[1]==0,0,truth_rowindex[1]))
ifelse(truthpos[1]==0,0,truth_rowindex[1])
truth_row <- unlist(apply(truthpos, 1, function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x])))
rrr=c(); for (x in 1:nrow(tesseract_table)){c[x]<- ifelse(truthpos[x]==0,0,truth_rowindex[x])}
rrr=c(); for (i in 1:nrow(tesseract_table)){c[i]<- ifelse(truthpos[i]==0,0,truth_rowindex[i])}
truthpos
demo=truthpos[1:15]
truth_row <- unlist(sapply(demo, function(x) ifelse(demo[x]==0,0,truth_rowindex[x])))
truth_row
sapply(demo, function(x) ifelse(demo[x]==0,0,truth_rowindex[x]))
truth_split
tesseract_split[[2]]
tesseract_split[[3]]
truth_row+1
truthpos+1
truth_rowindex
ifelse(truthpos[1]==0,0,truth_rowindex[1])
ifelse(truthpos[1]==0,0,truth_rowindex[7])
ifelse(truthpos[1]==0,0,truth_rowindex[4])
ifelse(truthpos[4]==0,0,truth_rowindex[4])
ifelse(truthpos[7]==0,0,truth_rowindex[7])
truth_row <- unlist(sapply(1:nrow(tesseract_table), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x])))
truth_row
truth_split <- str_split(current_ground_truth_txt, " ")
lengthperrow1 <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), lengthperrow1)
truth_table <- cbind(word = unlist(truth_split), truth_rowindex)
nrow(truth_table) #1751
tesseract_split <- str_split(current_tesseract_txt, " ")
lengthperrow2 <- sapply(tesseract_split, length)
tesseract_rowindex <- rep(1:length(current_tesseract_txt), lengthperrow2)
tesseract_table <- cbind(word = unlist(tesseract_split), tesseract_rowindex)
nrow(tesseract_table) #1756
res = c()
pos = rep(list(0), nrow(tesseract_table))
for (i in 1:nrow(tesseract_table)){
res[i] <- ifelse(tesseract_table[i,1] %in% truth_table[,1],1,0)
pos[[i]] <- if(res[i]==1) which(truth_table[,1]==tesseract_table[i,1]) else 0
}
truthpos = c(0) #position plus one
for (i in 1:nrow(tesseract_table)){
truthpos[i+1] <- ifelse(((pos[[i]]>truthpos[i])&(pos[[i]] <= (i+5))),
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
truthpos[c(0, diff(truthpos))==0] <- 0
truth_row <- unlist(sapply(1:nrow(tesseract_table), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[x])))
#1: correct, 0: wrong
ifwordcorrect <- rep(1,nrow(tesseract_table))
ifwordcorrect[truthpos==0] <- 0
ifcorrectmatrix <- cbind(tesseract_table, truthpos, truth_row, ifwordcorrect)
ifcorrectmatrix
?rle
x <- rev(rep(6:10, 1:5))
rle(x)
rep(6:10, 1:5)
iii"apppple"
iii="apppple"
iii
word=iii
word
rle(strsplit(word,"")[[1]])
max(rle(strsplit(word,"")[[1]]))
str_length(word)
#feature6
rle(strsplit(word,"")[[1]])[1]
#feature6
max(rle(strsplit(word,"")[[1]])[1])
#feature6
unlist(rle(strsplit(word,"")[[1]])[1])
#feature6
max(unlist(rle(strsplit(word,"")[[1]])[1]))
strsplit(word,"")[[1]]
rle(unlist(strsplit(word,"")))$lengths
rle(strsplit(word,""))$lengths
rle(strsplit(word,""))
rle(strsplit(word,"")
)
strsplit(word,"")
feature <- function(word){
#feature1
l <- str_length(word)
#feature2
vowels <- c("a", "e", "i", "o", "u", "v")
word_lower <- tolower(strsplit(word, "")[[1]])
word_freq <- word_lower[word_lower %in% letters]
word_table <- table(word_freq)
l <- sum(word_table)
v <- sum(word_table[vowels], na.rm=TRUE)
c <- l - v
q1 <- v / l
q2 <- c / l
q3 <- ifelse(c != 0, v/c, 0)
#feature3
s <- length(grep("[^[:alnum:]]", strsplit(word,"")[[1]]))
l <- str_length(word)
#feature4
d<-length(grep("[0-9]", strsplit(word,"")[[1]]))
l<-str_length(word)
#feature5
low<-length(grep("[a-z]", strsplit(word,"")[[1]]))
upp<-length(grep("[A-Z]", strsplit(word,"")[[1]]))
#feature6
maxletter <- max(unlist(rle(strsplit(word,"")[[1]])[1]))
f6 <- ifelse(maxletter>2, maxletter/l, 0)
#feature7
l_alpha<-length(grep("[[:alnum:]=\\.]", strsplit(word,"")[[1]]))
k<-l-l_alpha
f7 <- ifelse(k>l_alpha,1,0)
#feature8
consec_con<-str_count(word,"[bcdfghjklmnpqrstxzwyBCDFGHJKLMNPQRSTXZWY]{6,}")
f8 <- ifelse(consec_con>=1,1,0)
#feature9
l<-nchar(word)
trim_word <- substr(word,2,(l-1))
non_alnum<-str_count(trim_word,"[^[:alnum:]]")
f9 <- ifelse(non_alnum>=2,1,0)
#feature10bigram
bigramletters <- tolower(char_ngrams(strsplit(word,"")[[1]],2,concatenator = ""))
f10 <- sum(bigramtable[bigramletters], na.rm = TRUE)/length(bigramletters)/1000
#feature11MFS
split <- strsplit(word, "")[[1]]
i <- max(table(split))
f11 <- ifelse(i>=3, i/l, 0)
#feature12NAS
l1 <- length(grep("[[:alpha:]]", strsplit(word,"")[[1]]))
l <- nchar(word)
l2 <- l-l1
f12 <- ifelse(l1 != 0, l1/l2, 0)
return(c(l=l,
v_l <- q1, c_l <- q2, v_c <- q3,
s/l,
d/l,
low/l,upp/l,
f6, f7, f8, f9, f10, f11, f12))
}
library(stringr)
library(quanteda)
library(stringr)
library(quanteda)
feature <- function(word){
#feature1
l <- str_length(word)
#feature2
vowels <- c("a", "e", "i", "o", "u", "v")
word_lower <- tolower(strsplit(word, "")[[1]])
word_freq <- word_lower[word_lower %in% letters]
word_table <- table(word_freq)
l <- sum(word_table)
v <- sum(word_table[vowels], na.rm=TRUE)
c <- l - v
q1 <- v / l
q2 <- c / l
q3 <- ifelse(c != 0, v/c, 0)
#feature3
s <- length(grep("[^[:alnum:]]", strsplit(word,"")[[1]]))
l <- str_length(word)
#feature4
d<-length(grep("[0-9]", strsplit(word,"")[[1]]))
l<-str_length(word)
#feature5
low<-length(grep("[a-z]", strsplit(word,"")[[1]]))
upp<-length(grep("[A-Z]", strsplit(word,"")[[1]]))
#feature6
maxletter <- max(unlist(rle(strsplit(word,"")[[1]])[1]))
f6 <- ifelse(maxletter>2, maxletter/l, 0)
#feature7
l_alpha<-length(grep("[[:alnum:]=\\.]", strsplit(word,"")[[1]]))
k<-l-l_alpha
f7 <- ifelse(k>l_alpha,1,0)
#feature8
consec_con<-str_count(word,"[bcdfghjklmnpqrstxzwyBCDFGHJKLMNPQRSTXZWY]{6,}")
f8 <- ifelse(consec_con>=1,1,0)
#feature9
l<-nchar(word)
trim_word <- substr(word,2,(l-1))
non_alnum<-str_count(trim_word,"[^[:alnum:]]")
f9 <- ifelse(non_alnum>=2,1,0)
#feature10bigram
bigramletters <- tolower(char_ngrams(strsplit(word,"")[[1]],2,concatenator = ""))
f10 <- sum(bigramtable[bigramletters], na.rm = TRUE)/length(bigramletters)/1000
#feature11MFS
split <- strsplit(word, "")[[1]]
i <- max(table(split))
f11 <- ifelse(i>=3, i/l, 0)
#feature12NAS
l1 <- length(grep("[[:alpha:]]", strsplit(word,"")[[1]]))
l <- nchar(word)
l2 <- l-l1
f12 <- ifelse(l1 != 0, l1/l2, 0)
return(c(l=l,
v_l <- q1, c_l <- q2, v_c <- q3,
s/l,
d/l,
low/l,upp/l,
f6, f7, f8, f9, f10, f11, f12))
}
features('apppple')
features <- function(word){
#feature1
l <- str_length(word)
#feature2
vowels <- c("a", "e", "i", "o", "u", "v")
word_lower <- tolower(strsplit(word, "")[[1]])
word_freq <- word_lower[word_lower %in% letters]
word_table <- table(word_freq)
l <- sum(word_table)
v <- sum(word_table[vowels], na.rm=TRUE)
c <- l - v
q1 <- v / l
q2 <- c / l
q3 <- ifelse(c != 0, v/c, 0)
#feature3
s <- length(grep("[^[:alnum:]]", strsplit(word,"")[[1]]))
l <- str_length(word)
#feature4
d<-length(grep("[0-9]", strsplit(word,"")[[1]]))
l<-str_length(word)
#feature5
low<-length(grep("[a-z]", strsplit(word,"")[[1]]))
upp<-length(grep("[A-Z]", strsplit(word,"")[[1]]))
#feature6
maxletter <- max(unlist(rle(strsplit(word,"")[[1]])[1]))
f6 <- ifelse(maxletter>2, maxletter/l, 0)
#feature7
l_alpha<-length(grep("[[:alnum:]=\\.]", strsplit(word,"")[[1]]))
k<-l-l_alpha
f7 <- ifelse(k>l_alpha,1,0)
#feature8
consec_con<-str_count(word,"[bcdfghjklmnpqrstxzwyBCDFGHJKLMNPQRSTXZWY]{6,}")
f8 <- ifelse(consec_con>=1,1,0)
#feature9
l<-nchar(word)
trim_word <- substr(word,2,(l-1))
non_alnum<-str_count(trim_word,"[^[:alnum:]]")
f9 <- ifelse(non_alnum>=2,1,0)
#feature10bigram
bigramletters <- tolower(char_ngrams(strsplit(word,"")[[1]],2,concatenator = ""))
f10 <- sum(bigramtable[bigramletters], na.rm = TRUE)/length(bigramletters)/1000
#feature11MFS
split <- strsplit(word, "")[[1]]
i <- max(table(split))
f11 <- ifelse(i>=3, i/l, 0)
#feature12NAS
l1 <- length(grep("[[:alpha:]]", strsplit(word,"")[[1]]))
l <- nchar(word)
l2 <- l-l1
f12 <- ifelse(l1 != 0, l1/l2, 0)
return(c(l=l,
v_l <- q1, c_l <- q2, v_c <- q3,
s/l,
d/l,
low/l,upp/l,
f6, f7, f8, f9, f10, f11, f12))
}
features('apppple')
features <- function(word){
#feature1
l <- str_length(word)
#feature2
vowels <- c("a", "e", "i", "o", "u", "v")
word_lower <- tolower(strsplit(word, "")[[1]])
word_freq <- word_lower[word_lower %in% letters]
word_table <- table(word_freq)
l <- sum(word_table)
v <- sum(word_table[vowels], na.rm=TRUE)
c <- l - v
q1 <- v / l
q2 <- c / l
q3 <- ifelse(c != 0, v/c, 0)
#feature3
s <- length(grep("[^[:alnum:]]", strsplit(word,"")[[1]]))
l <- str_length(word)
#feature4
d<-length(grep("[0-9]", strsplit(word,"")[[1]]))
l<-str_length(word)
#feature5
low<-length(grep("[a-z]", strsplit(word,"")[[1]]))
upp<-length(grep("[A-Z]", strsplit(word,"")[[1]]))
#feature6
maxletter <- max(unlist(rle(strsplit(word,"")[[1]])[1]))
f6 <- ifelse(maxletter>2, maxletter/l, 0)
#feature7
l_alpha<-length(grep("[[:alnum:]=\\.]", strsplit(word,"")[[1]]))
k<-l-l_alpha
f7 <- ifelse(k>l_alpha,1,0)
#feature8
consec_con<-str_count(word,"[bcdfghjklmnpqrstxzwyBCDFGHJKLMNPQRSTXZWY]{6,}")
f8 <- ifelse(consec_con>=1,1,0)
#feature9
l<-nchar(word)
trim_word <- substr(word,2,(l-1))
non_alnum<-str_count(trim_word,"[^[:alnum:]]")
f9 <- ifelse(non_alnum>=2,1,0)
#feature10bigram
bigramletters <- tolower(char_ngrams(strsplit(word,"")[[1]],2,concatenator = ""))
f10 <- sum(bigramtable[bigramletters], na.rm = TRUE)/length(bigramletters)/1000
#feature11MFS
split <- strsplit(word, "")[[1]]
i <- max(table(split))
f11 <- ifelse(i>=3, i/l, 0)
#feature12NAS
l1 <- length(grep("[[:alpha:]]", strsplit(word,"")[[1]]))
l <- nchar(word)
l2 <- l-l1
f12 <- ifelse(l1 != 0, l1/l2, 0)
return(c(l=l,
v_l <- q1, c_l <- q2, v_c <- q3,
s/l,
d/l,
low/l,upp/l,
f6, f7, f8, f9, f10, f11, f12, l1, l2))
}
features('apppple')
features('apppple')
bigramletters
load("/Users/yeyejiang/Documents/GitHub/Spring2019-Proj4-group10/output/bigram.RData")
features('apppple')
bigramtable[bigramletters]
bigramletters <- tolower(char_ngrams(strsplit(word,"")[[1]],2,concatenator = ""))
bigramletters
f10 <- sum(bigramtable[bigramletters], na.rm = TRUE)/length(bigramletters)/1000
f10
features('apppple')
features <- function(word){
#feature1
l <- str_length(word)
#feature2
vowels <- c("a", "e", "i", "o", "u", "v")
word_lower <- tolower(strsplit(word, "")[[1]])
word_freq <- word_lower[word_lower %in% letters]
word_table <- table(word_freq)
l <- sum(word_table)
v <- sum(word_table[vowels], na.rm=TRUE)
c <- l - v
q1 <- v / l
q2 <- c / l
q3 <- ifelse(c != 0, v/c, 0)
#feature3
s <- length(grep("[^[:alnum:]]", strsplit(word,"")[[1]]))
l <- str_length(word)
#feature4
d<-length(grep("[0-9]", strsplit(word,"")[[1]]))
l<-str_length(word)
#feature5
low<-length(grep("[a-z]", strsplit(word,"")[[1]]))
upp<-length(grep("[A-Z]", strsplit(word,"")[[1]]))
#feature6
maxletter <- max(unlist(rle(strsplit(word,"")[[1]])[1]))
f6 <- ifelse(maxletter>2, maxletter/l, 0)
#feature7
l_alpha<-length(grep("[[:alnum:]=\\.]", strsplit(word,"")[[1]]))
k<-l-l_alpha
f7 <- ifelse(k>l_alpha,1,0)
#feature8
consec_con<-str_count(word,"[bcdfghjklmnpqrstxzwyBCDFGHJKLMNPQRSTXZWY]{6,}")
f8 <- ifelse(consec_con>=1,1,0)
#feature9
l<-nchar(word)
trim_word <- substr(word,2,(l-1))
non_alnum<-str_count(trim_word,"[^[:alnum:]]")
f9 <- ifelse(non_alnum>=2,1,0)
#feature10bigram
bigramletters <- tolower(char_ngrams(strsplit(word,"")[[1]],2,concatenator = ""))
f10 <- sum(bigramtable[bigramletters], na.rm = TRUE)/length(bigramletters)/1000
#feature11MFS
split <- strsplit(word, "")[[1]]
i <- max(table(split))
f11 <- ifelse(i>=3, i/l, 0)
#feature12NAS
l1 <- length(grep("[[:alpha:]]", strsplit(word,"")[[1]]))
l <- nchar(word)
l2 <- l-l1
f12 <- ifelse(l1 != 0, l2/l1, 0)
return(c(l=l,
v_l = q1, c_l = q2, v_c = q3,
s_l = s/l,
d_l = d/l,
low_l = low/l, upp_l = upp/l,
f6=f6, f7=f7, f8=f8, f9=f9, f10=f10, f11=f11, f12=f12))
}
features(word)
features('individual')
features('confidence')
features('apple')
length(bigramletters)
