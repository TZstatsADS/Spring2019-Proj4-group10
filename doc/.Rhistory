for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE, encoding = 'UTF-8')
truth <- c(truth, inputtxt)
}
length(truth)
# Collecting ground truth vector
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE, encoding = 'UTF-8')
truth <- c(truth, inputtxt)
}
#head(truth, 5)
ground_truth_vec <- unlist(strsplit(tolower(truth), " "))
load("../output/svm.model.pred.rda")
# Collecting tesseract vector
tesseract_vec <- rownames(testset)
length(tesseract_vec)
load("/Users/yeyejiang/Documents/GitHub/Spring2019-Proj4-group10/output/aftercorrection1.RData")
test_df_correct1
nrow(test_df_correct1)
length(truth)
head(truth)
head(test_df_correct1)
length(ground_truth_vec)
nrow(test_df_correct1)
nrow(datamatrix['j' %in% test_df,])
datamatrix[,'j'] %in% test_df
nrow(datamatrix[datamatrix[,'j'] %in% test_df,])
datamatrix[datamatrix[,'j'] %in% test_df,]
datamatrix[datamatrix[,'j'] %in% test_df]
datamatrix[,'j'] %in% test_df
datamatrix
datamatrix[,'j'] %in% test_df
sum(datamatrix[,'j'] %in% test_df)
sum(datamatrix[,'j'] %in% test.index)
View(test_df_correct1)
ground_truth_vec
for(i in test.index){
inputtxt <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE, encoding = 'UTF-8')
aaaa <- c(truth, inputtxt)
}
length(aaaa)
for(i in test.index){
inputtxt <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE, encoding = 'UTF-8')
aaaa <- c(aaaa, inputtxt)
}
length(aaaa)
test.index
for(i in test.index){
return(i)
}
for(i in test.index){
print(i)
}
length(unlist(strsplit(tolower(aaaa), " ")))
length(ground_truth_vec)
sum(datamatrix[,'j'] %in% test_df)
datamatrix[,'j'] %in% test_df
sum(datamatrix[,'j'] %in% test.index)
43544/17
aaaa
unlist(strsplit(tolower(aaaa), " "))
length(unlist(strsplit(tolower(aaaa), " ")))
test.index
readLines(paste("../data/tesseract/",file_name_vec[4],sep="")
)
length(readLines(paste("../data/tesseract/",file_name_vec[4],sep="")))
for(j in test.index){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
a<- unlist(strsplit(current_ground_truth_txt))
print(a)
b<- unlist(strsplit(current_tesseract_txt))
print(b)
}
?strsplit
j=4
current_file_name <- sub(".txt","",file_name_vec[j])
current_file_name
file_name_vec
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
unlist(strsplit(current_ground_truth_txt))
strsplit(current_ground_truth_txt,"")
strsplit(current_ground_truth_txt," ")
for(j in test.index){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
a<- unlist(strsplit(current_ground_truth_txt," "))
print(a)
b<- unlist(strsplit(current_tesseract_txt," "))
print(b)
}
for(j in test.index){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
a<- unlist(strsplit(current_ground_truth_txt," "))
print(a)
b<- unlist(strsplit(current_tesseract_txt," "))
print(b)
}
for(j in test.index){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
a<- length(unlist(strsplit(current_ground_truth_txt," ")))
print(a)
b<- length(unlist(strsplit(current_tesseract_txt," ")))
print(b)
}
aa=c()
bb=c()
for(j in test.index){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
a<- length(unlist(strsplit(current_ground_truth_txt," ")))
aa=c(aa,a)
b<- length(unlist(strsplit(current_tesseract_txt," ")))
bb=c(bb,b)
}
aa
sum(aa)
sum(bb)
sum(datamatrix[,'j'] %in% test_df)
sum(datamatrix[,'j'] %in% test.index)
# Collecting ground truth vector
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE, encoding = 'UTF-8')
truth <- c(truth, inputtxt)
print(file_name_vec[i])
print(i)
}
# head(truth, 5)
ground_truth_vec <- unlist(strsplit(tolower(truth), " "))
length(ground_truth_vec)
truth
# Collecting ground truth vector
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE, encoding = 'UTF-8')
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
truth <- c(truth, inputtxt1)
}
length(truth)
# Collecting ground truth vector
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
truth <- c(truth, inputtxt1)
}
length(truth)
for(i in test.index){
inputtxt <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
aaaa <- c(aaaa, inputtxt1)
}
length(aaaa)
length(truth)
file_name_vec
j=4
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
a<- length(unlist(strsplit(current_ground_truth_txt," ")))
b<- length(unlist(strsplit(current_tesseract_txt," ")))
a
b
i=4;inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
length(inputtxt1)
truth <- c()
aaaa <- c()
#Collecting ground truth vector
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
truth <- c(truth, inputtxt1)
}
for(i in test.index){
inputtxt <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
aaaa <- c(aaaa, inputtxt1)
}
length(truth)
length(aaaa)
sum(datamatrix[,'j'] %in% test.index)
truth <- c()
aaaa <- c()
#Collecting ground truth vector
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
truth <- c(truth, inputtxt1)
}
length(truth)
View(test_df_correct1)
nrow(test_df_correct1)
aaaa
for(i in test.index){
inputtxt <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
aaaa <- c(aaaa, inputtxt1)
}
aaaa
datamatrix[datamatrix[,'j'] %in% test.index,]
datamatrix
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!require("caret")) install.packages("caret")
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
datamatrix['j'==4,]
datamatrix[datamatrix[,'j']==4,]
source('../lib/features.R')
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!require("caret")) install.packages("caret")
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!require("caret")) install.packages("caret")
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
datamatrix = c()
for(j in c(1:length(file_name_vec))){
current_file_name <- sub(".txt","",file_name_vec[j])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
#split ground truth text and get row index
truth_split <- str_split(current_ground_truth_txt, " ")
tru_split <- unlist(truth_split)
truth_lengthperrow <- sapply(truth_split, length)
truth_rowindex <- rep(1:length(current_ground_truth_txt), truth_lengthperrow)
#split tesseract text and get row index
tesseract_split <- str_split(current_tesseract_txt, " ")
tes_split <- unlist(tesseract_split)
tes_lengthperrow <- sapply(tesseract_split, length)
tes_row <- rep(1:length(current_tesseract_txt), tes_lengthperrow)
###############
#get the correct position of corresponding word in ground truth text
#for each word, we find all it's matches in ground truth text, but there are some problems
#for example, 'and' may have several indexes in ground truth text. We want to find the correct one.
#for example, the third word only matches the last few words in the ground truth text, obviously it's not the right index.
###############
res = c()
pos = rep(list(0), length(tes_split))
truthpos <- c(0)
for (i in 1:length(tes_split)){
#if the word in OCR output appears in ground truth text
res[i] <- ifelse(tes_split[i] %in% tru_split,1,0)
#get all the matches for each appeared word
pos[[i]] <- if(res[i]==1) which(tru_split==tes_split[i]) else 0
}
tempindex <- cumsum(res)
#for each selected word in the loop, we have the index of it's previous selected word,
#if the previous selected word is not an appeared word in the ground truth text, the index will be equal to the last appeared word.
#delete indexes which are smaller than the index of the previous selected word.
#and delete indexes which are greater than the smallest possible index of next two words
for (i in 1:length(tes_split)){
#get the index of next appeared word
nextnonzero1 <- min(which(tempindex == tempindex[i]+1))
#get the index of next second appeared word
nextnonzero2 <- min(which(tempindex == tempindex[i]+2))
a <- pos[[nextnonzero1]]
b <- pos[[nextnonzero2]]
#get a list of the right index of each word
#for those words which are not appeared in ground truth text, the index will equal to the previous appeared word.
#so the list include increasing numbers
truthpos[i+1] <- ifelse(sum((pos[[i]]>truthpos[i]) &
pos[[i]]<= min(a[a>truthpos[i]]) & pos[[i]]<= min(b[b>truthpos[i]])
)>0,
pos[[i]][min(which(pos[[i]]>truthpos[i]))],
truthpos[i])
}
truthpos <- truthpos[-1]
#let the indexes of words which are not appeared in ground truth text be 0
truthpos[c(0, diff(truthpos))==0] <- 0
#finally get the list with correct indexes.    1: correct, 0: wrong
ifwordcorrect <- rep(1,length(tes_split))
ifwordcorrect[truthpos==0] <- 0
#add row index in ground truth text
truth_row <- unlist(sapply(1:length(tes_split), function(x) ifelse(truthpos[x]==0,0,truth_rowindex[truthpos[x]])))
#create matrix
index <- 1:length(truth_row)
ifcorrectmatrix <- cbind(index, tes_row, truthpos, truth_row, ifwordcorrect)
rownames(ifcorrectmatrix) <- tes_split
#add features to this matrix
feat <- do.call(rbind, lapply(tes_split, features))
tempmatrix <- cbind(ifcorrectmatrix, feat, j)
datamatrix <- rbind(datamatrix, tempmatrix)
}
for (p in 1:100){
print(row.names(datamatrix[datamatrix[,'j']==4,])[1:3])
}
for (p in 1:100){
print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
}
for (p in 1:100){
print(p, row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
}
for (p in 1:100){
print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
}
for (p in 1:100){print(p);
print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
}
datamatrix[datamatrix[,'j']==26,])[1:100]
datamatrix[datamatrix[,'j']==26,][1:100]
datamatrix[datamatrix[,'j']==26,]
rownames(datamatrix[datamatrix[,'j']==26,])
rownames(datamatrix[datamatrix[,'j']==26,])[1]
length(rownames(datamatrix[datamatrix[,'j']==26,])[1])
nchar(rownames(datamatrix[datamatrix[,'j']==26,])[1])
nrow(datamatrix)
sum(datamatrix[,'j'] %in% test.index)
save(datamatrix, file = '../output/datamatrix.RData')
load("/Users/yeyejiang/Documents/GitHub/Spring2019-Proj4-group10/output/datamatrix.RData")
for (p in 1:100){
print(p)
print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
}
for (p in 1:100){
print(p)
print(row.names(datamatrix[datamatrix[,'j']==p,])[1:20])
}
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!require("caret")) install.packages("caret")
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
#see the svm.R
#performance of SVM model
load('../output/datamatrix.RData')
for (p in 1:100){
print(p)
print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
}
datamatrix[1:5,]
datamatrix[10000,]
datamatrix[10000:10001,]
#Collecting ground truth vector
ground_truth_vec <- c()
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
ground_truth_vec <- c(ground_truth_vec, inputtxt1)
}
#see the svm.R
#performance of SVM model
load('../output/datamatrix.RData')
#test  (delete later)
for (p in 1:100){
print(p)
print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
}
#split the dataset into training and test data
set.seed(1)
#head(datamatrix)
s<-sample(1:2,length(file_name_vec),prob=c(0.8,0.2),replace=T)
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
ground_truth_vec <- c(ground_truth_vec, inputtxt1)
}
#see correction.R
test_df<-as.data.frame(datamatrix[datamatrix$j %in% test.index,])
if (!require("devtools")) install.packages("devtools")
if (!require("caret")) install.packages("devtools")
if (!require("pacman")) {
## devtools is required
library(devtools)
#install_github("trinker/pacman")
}
if (!require("caret")) install.packages("caret")
library(e1071)
pacman::p_load(knitr, readr, stringr, tesseract, vecsets)
source('../lib/ifCleanToken.R')
source('../lib/correct_index_func1.R')
source('../lib/replace_function.R')
load('../output/bigram.RData')
load("../output/svm.model.pred.rda")
file_name_vec <- list.files("../data/ground_truth") #100 files in total
#see correction.R
test_df<-as.data.frame(datamatrix[datamatrix$j %in% test.index,])
#see correction.R
test_df<-as.data.frame(datamatrix[datamatrix[,'j'] %in% test.index,])
#see the svm.R
#performance of SVM model
load('../output/datamatrix.RData')
#test  (delete later)
# for (p in 1:100){
#   print(p)
#   print(row.names(datamatrix[datamatrix[,'j']==p,])[1:3])
# }
#split the dataset into training and test data
set.seed(1)
#head(datamatrix)
s<-sample(1:2,length(file_name_vec),prob=c(0.8,0.2),replace=T)
train.index<-which(s==1)
test.index<-which(s==2)
datamatrix<-as.data.frame(datamatrix)
datamatrix$ifwordcorrect<-factor(datamatrix$ifwordcorrect)
trainset<-as.data.frame(datamatrix[datamatrix$j %in% train.index,c(-1,-2,-3,-4,-27)])
testset<-as.data.frame(datamatrix[datamatrix$j %in% test.index,c(-1,-2,-3,-4,-27)])
#report training accuracy
load("../output/svm.best.rda")
load("../output/predvalue.rda")
#report training confusion matrix
library(caret)
confusionMatrix(data=predvalue,reference=testset$ifwordcorrect,positive="0")->svm.table
svm.table
#recall
svm.table$table[1,1]/(svm.table$table[1,1]+svm.table$table[1,2])->recall
recall
#F-1 score
precision<-svm.table$table[1,1]/(svm.table$table[2,1]+svm.table$table[1,1])
f1<-2*precision*recall/(precision+recall)
f1
#see correction.R
test_df<-as.data.frame(datamatrix[datamatrix[,'j'] %in% test.index,])
test_vec<-rownames(test_df)
test_if_clean<-predvalue
#length(tesseract_if_clean)
test_if_error<-ifelse(test_if_clean==1,F,T)
#extract error terms
test_error_vec <- test_vec[test_if_error]
load("../output/error_correction.RData")
library(tidyr)
#Collecting ground truth vector
ground_truth_vec <- c()
for(i in test.index){
inputtxt <- readLines(paste("../data/ground_truth/",file_name_vec[i],sep=""), warn=FALSE)
inputtxt1 <- unlist(strsplit(tolower(inputtxt), " "))
ground_truth_vec <- c(ground_truth_vec, inputtxt1)
}
length(ground_truth_vec)
test_df_correct1[,1]
#load("../output/error_correction.RData")
load("../output/error_correction1.RData")
load("../output/aftercorrection1.RData")
load("../output/aftercorrection2.RData")
View(test_df_correct1)
# Collecting tesseract vector
tesseract_vec1 <- test_df_correct1[,1]
tesseract_vec1
tesseract_delete_error_vec1 <- test_df_correct1[,2]
tesseract_vec2 <- test_df_correct2[,1]
old_intersect_vec <- vecsets::vintersect(tolower(ground_truth_vec), tolower(tesseract_vec1)) #607
new_intersect_vec <- vecsets::vintersect(tolower(ground_truth_vec), tolower(tesseract_delete_error_vec1))
